import { createCallerFactory, createTRPCRouter, publicProcedure } from "~/server/api/trpc";
import OpenAI from "openai";
import { zodResponseFormat } from "openai/helpers/zod";
import { z } from "zod";

const openai = new OpenAI({
  apiKey: process.env['OPENAI_API_KEY'],
});

const PROMPT = `
You are tasked with helping a student solve a math problem.
When provided with a problem, respond in a json structured format like {steps: [{desc: "", code: ""}]}.
Do not provide any other output. Each step description should briefly detail how to perform a step and contain a latex representation delimited with $$ where numerical values are replaced by variables represented as unique letters a-z surrounded by // on either side as delimiters.
The code field should contain some javascript code to get the new variable values from the variables in the previous step.
Using this data, at each step I will run the code and each variable delimited in the desc will be replaced by values generated by the code.
The first step should always be the original problem in the desc and initialize the numeric values as variables in the code and the subsequent steps should solve the problem incrementally.
If no problem is detected, respond with a single step with no code and a description stating "Um, that's not a math problem". 
I'll provide you with a partial example of the format I expect:
4x - 2 = 2
[{"desc": "$$//a//x - //b// = //c//$$", "code": "const a = 4; const b = 2; const c = 2;"}, {"desc": "Add //b// to both sides: $$//a//x - //b// + //b// = //c// + //b//$$ -> $$//a//x = //d//$$", "code": "const d = c + b;"}, ...]
`;


const SubmitImageResponse = z.object({
  steps: z.array(z.object({
    desc: z.string(),
    code: z.string(),
  })),
});

type SubmitImageResponseType = {
  steps: {
    desc: string;
    code: string;
  }[];
};

/**
 * This is the primary router for your server.
 *
 * All routers added in /api/routers should be manually added here.
 */
export const appRouter = createTRPCRouter({
  submitImage: publicProcedure
    .input(z.object({ imageb64: z.string().min(1) }))
    .output(SubmitImageResponse)
    .mutation(async ({ input }) => {
      console.log(input.imageb64);
      const completion = await openai.beta.chat.completions.parse({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: PROMPT },
          {
            role: "user",
            content: [
              {
                type: "image_url",
                image_url: {
                  "url": input.imageb64,
                },
              }
            ],
          },
        ],
        response_format: zodResponseFormat(SubmitImageResponse, "event"),
      });

      const event: SubmitImageResponseType = completion.choices[0]?.message.parsed || {steps:[{desc: "Execution error", code: ""}]};
      console.log(event);

      return event;
    }),
});

// export type definition of API
export type AppRouter = typeof appRouter;

/**
 * Create a server-side caller for the tRPC API.
 * @example
 * const trpc = createCaller(createContext);
 * const res = await trpc.post.all();
 *       ^? Post[]
 */
export const createCaller = createCallerFactory(appRouter);
